
mod TYPE is
  sorts Type .

  op _<:_ : Type Type -> Bool .
  var T : Type .
  eq T <: T = true .

  op _<:>_ : Type Type -> Bool .
  var X Y Z : Type .
  eq X <:> Y = X <: Y or Y <: X .

  sorts TypeError .
  op Undefined : TypeError -> Type .
endm

mod BOOLEAN-TYPE is
  pr TYPE .

  sort BooleanType .
  subsort BooleanType < Type .

  op Boolean : -> BooleanType .
endm

mod NUMERIC-TYPES is
  pr TYPE .

  sort NumericType .
  subsort NumericType < Type .

  op Byte : -> NumericType .
  op Short : -> NumericType .
  op Integer : -> NumericType .
  op Long : -> NumericType .
  op Decimal : -> NumericType .

  op numeric : Type -> Bool .

  var T1 : NumericType .
  eq numeric(T1) = true .

  var T2 : Type .
  eq numeric(T2) = false .

  eq Byte <: Short = true .
  eq Short <: Integer = true .
  eq Integer <: Long = true .
  eq Long <: Decimal = true .
endm

mod FLOATING-POINT-TYPES is
  pr TYPE .

  sort FloatingPointType .
  subsort FloatingPointType < Type .

  op Float : -> FloatingPointType .
  op Double : -> FloatingPointType .

  op floating_point : Type -> Bool .

  var T1 : FloatingPointType .
  eq floating_point(T1) = true .

  var T2 : Type .
  eq floating_point(T2) = false .

  eq Float <: Double = true .
endm

mod STRING-TYPE is
  pr TYPE .
  op String : -> Type .
endm

mod PRIMITIVE-TYPES is
  pr BOOLEAN-TYPE .
  pr NUMERIC-TYPES .
  pr FLOATING-POINT-TYPES .
  pr STRING-TYPE .
endm

--- mod REFERENTIAL-TYPES is
---   pr TYPE .
---
---   sorts ReferentialType SequentialType OptionalType RequiredType .
---   subsorts RequiredType < OptionalType < SequentialType < ReferentialType < Type .
---
---   var T : Type .
---
---   op _? : RequiredType -> OptionalType .
---   op InvalidOptionalTypeDeclaration : -> TypeError .
---   ceq T ? = Undefined(InvalidOptionalTypeDeclaration)
---     if not (T :: RequiredType) .
---
---   op _* : RequiredType -> SequentialType .
---   op InvalidSequentialTypeDeclaration : -> TypeError .
---   ceq T * = Undefined(InvalidSequentialTypeDeclaration)
---     if not (T :: RequiredType) .
---
---   op elementaryTypeOf : ReferentialType -> ReferentialType .
---   ceq elementaryTypeOf(T ?) = T if T :: ReferentialType .
---   ceq elementaryTypeOf(T *) = T if T :: ReferentialType .
--- endm

mod REFERENTIAL-TYPE is
  pr TYPE .
  sort ReferentialType .
  subsort ReferentialType < Type .

  var T : ReferentialType .
  op elementaryTypeOf : ReferentialType -> ReferentialType .
  eq elementaryTypeOf(T) = T .
endm

mod TYPES is
  pr PRIMITIVE-TYPES .
  pr REFERENTIAL-TYPE .
endm
