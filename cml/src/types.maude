
mod CARDINALITY is
  sort Cardinality .

  op zero : -> Cardinality .
  op one : -> Cardinality .
  op many : -> Cardinality .

  op _<=_ : Cardinality Cardinality -> Bool .
  var C : Cardinality .
  eq C <= C = true .
  eq zero <= one = true .
  eq zero <= many = true .
  eq one <= zero = false .
  eq one <= many = true .
  eq many <= zero = false .
  eq many <= one = false .

  op _>=_ : Cardinality Cardinality -> Bool .
  var C1 C2 : Cardinality .
  eq C1 >= C2 = C2 <= C1 .
endm

mod TYPE is
  pr CARDINALITY .

  sorts Type .

  op _<:_ : Type Type -> Bool .
  var T : Type .
  eq T <: T = true .

  op _<:>_ : Type Type -> Bool .
  var X Y Z : Type .
  eq X <:> Y = X <: Y or Y <: X .

  op minCardinality : Type -> Cardinality .
  eq minCardinality(T ?) = zero .
  eq minCardinality(T *) = zero .

  op maxCardinality : Type -> Cardinality .
  eq maxCardinality(T ?) = one .
  eq maxCardinality(T *) = many .

  op _<*_ : Type Type -> Bool .
  var T1 T2 : Type .
  eq T1 <* T2 = minCardinality(T1) >= minCardinality(T2) and
                maxCardinality(T1) <= maxCardinality(T2) .

  op elementaryTypeOf : Type -> Type .

  op InvalidCardinalityDeclaration : -> TypeError .

  op _? : Type -> Type .
  ceq T ? = Undefined(InvalidCardinalityDeclaration)
    if not (maxCardinality(elementaryTypeOf(T)) == one) .

  op _* : Type -> Type .
  ceq T * = Undefined(InvalidCardinalityDeclaration)
    if not (maxCardinality(elementaryTypeOf(T)) == one) .

  sorts TypeError .
  op Undefined : TypeError -> Type .

  op single : Type -> Bool .
  eq single(T) = minCardinality(T) == one and maxCardinality(T) == one .
endm

mod VALUE-TYPE is
  pr TYPE .

  sort ValueType .
  subsort ValueType < Type .
endm

mod BOOLEAN-TYPE is
  pr VALUE-TYPE .

  sort BooleanType .
  subsort BooleanType < ValueType .

  op Boolean : -> BooleanType .

  var T : Type .
  var B : BooleanType .

  ceq B <: T = false if T =/= B .
  ceq T <: B = false if T =/= B .

  ceq elementaryTypeOf(T) = T if T :: BooleanType .

  ceq minCardinality(T) = one if T :: BooleanType .
  ceq maxCardinality(T) = one if T :: BooleanType .
endm

mod NUMERIC-TYPES is
  pr VALUE-TYPE .

  sort NumericType .
  subsort NumericType < ValueType .

  op Byte : -> NumericType .
  op Short : -> NumericType .
  op Integer : -> NumericType .
  op Long : -> NumericType .
  op Decimal : -> NumericType .

  op numeric : Type -> Bool .

  eq Byte <: Short = true .
  eq Short <: Integer = true .
  eq Integer <: Long = true .
  eq Long <: Decimal = true .

  var N : NumericType .
  var T : Type .

  ceq N <: T = false if T =/= N .
  ceq T <: N = false if T =/= N .

  eq numeric(N) = true .
  eq numeric(T) = false .

  ceq elementaryTypeOf(T) = T if T :: NumericType .

  ceq minCardinality(T) = one if T :: NumericType .
  ceq maxCardinality(T) = one if T :: NumericType .
endm

mod FLOATING-POINT-TYPES is
  pr VALUE-TYPE .

  sort FloatingPointType .
  subsort FloatingPointType < ValueType .

  op Float : -> FloatingPointType .
  op Double : -> FloatingPointType .

  op floating_point : Type -> Bool .

  var T : Type .
  var F : FloatingPointType .

  eq Float <: Double = true .

  ceq F <: T = false if T =/= F .
  ceq T <: F = false if T =/= F .

  eq floating_point(F) = true .
  eq floating_point(T) = false .

  ceq elementaryTypeOf(T) = T if T :: FloatingPointType .

  ceq minCardinality(T) = one if T :: FloatingPointType .
  ceq maxCardinality(T) = one if T :: FloatingPointType .
endm

mod STRING-TYPE is
  pr VALUE-TYPE .

  op String : -> ValueType .

  var T : Type .

  eq String <: String = true .
  ceq String <: T = false if T =/= String .
  ceq T <: String = false if T =/= String .

  ceq elementaryTypeOf(T) = T if T == String .

  ceq minCardinality(T) = one if T == String .
  ceq maxCardinality(T) = one if T == String .
endm

mod PRIMITIVE-TYPES is
  pr BOOLEAN-TYPE .
  pr NUMERIC-TYPES .
  pr FLOATING-POINT-TYPES .
  pr STRING-TYPE .
endm

mod REFERENCE-TYPE is
  pr TYPE .

  sort ReferenceType .
  subsort ReferenceType < Type .

  var T : Type .

  ceq elementaryTypeOf(T) = T if T :: ReferenceType .
  ceq elementaryTypeOf(T ?) = T if T :: ReferenceType .
  ceq elementaryTypeOf(T *) = T if T :: ReferenceType .

  ceq minCardinality(T) = one if T :: ReferenceType .
  ceq maxCardinality(T) = one if T :: ReferenceType .
endm

mod TYPES is
  pr PRIMITIVE-TYPES .
  pr REFERENCE-TYPE .
endm
